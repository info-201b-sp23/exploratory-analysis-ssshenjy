latest_state_vacc <- state_vacc %>%
group_by(location) %>%
filter(date == max(date))
# 1.b Load the *national level* data from the following URL into a variable
# called `national`
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv
national <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv", stringsAsFactors = FALSE)
# 1.c Load the *state level* data from the following URL into a variable called
# `states`
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-states-covid-2023.csv
states <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-states-covid-2023.csv", stringsAsFactors = FALSE)
# 1.d Load the *county level* data from the following URL into a variable called
# `counties`
# NOTE: This is a large dataset. It may take 30-60 seconds to load.
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-counties-covid-2023.csv
counties <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-counties-covid-2023.csv", stringsAsFactors = FALSE)
# 1.e How many observations (rows) are in each dataset?
# Create `obs_national`, `obs_states`, `obs_counties`
obs_national <- national %>%
summarize(n_rows = n())
obs_states <- states %>%
summarize(n_rows = n())
obs_counties <- counties %>%
summarize(n_rows = n())
# 1.f How many features (columns) are there in each dataset?
# Create `num_features_national`, `num_features_states`, `num_features_counties`
num_features_national <- national %>%
ncol()
num_features_states <- states %>%
ncol()
num_features_counties <- counties %>%
ncol()
# 2.a How many total COVID cases have there been in the U.S. by the most recent
# date in the dataset? Make sure to pull() this number `total_us_cases`
total_us_cases <- national %>%
filter(date == max(as.Date(date))) %>%
pull(cases)
# 2.b How many total COVID-related deaths have there been in the U.S. by the
# most recent date in the dataset? Make sure to pull() this number
# `total_us_deaths`
total_us_deaths <- national %>%
filter(date == max(as.Date(date))) %>%
pull(deaths)
# 2.c Which state has had the highest number of COVID cases? Make sure to pull()
# this value `state_highest_cases`
state_highest_cases <- states %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
pull(state)
# 1.a Load the tidyverse package and the dplyr package
library("tidyverse")
library("dplyr")
# 2.a How many total COVID cases have there been in the U.S. by the most recent
# date in the dataset? Make sure to pull() this number `total_us_cases`
total_us_cases <- national %>%
filter(date == max(as.Date(date))) %>%
pull(cases)
# 2.b How many total COVID-related deaths have there been in the U.S. by the
# most recent date in the dataset? Make sure to pull() this number
# `total_us_deaths`
total_us_deaths <- national %>%
filter(date == max(as.Date(date))) %>%
pull(deaths)
# 2.c Which state has had the highest number of COVID cases? Make sure to pull()
# this value `state_highest_cases`
state_highest_cases <- states %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
pull(state)
# 2.d What is the highest number of cases in a state? Make sure to pull() this
# number `num_highest_state`
num_highest_state <- states %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
pull(cases)
# 2.e Which state has the highest ratio of deaths to cases (deaths/cases), as of
# the most recent date? Make sure to pull() this value
# HINT: You may need to create a new column in order to do this:
# `state_highest_ratio`
state_highest_ratio <- states %>%
filter(date == max(as.Date(date))) %>%
mutate(ratio = deaths/cases) %>%
filter(ratio == max(ratio)) %>%
pull(state)
# 2.f Which state has had the fewest number of cases as of the most
# recent date? Make sure to pull() this value `state_lowest_cases`
state_lowest_cases <- states %>%
filter(date == max(as.Date(date))) %>%
filter(cases == min(cases)) %>%
pull(state)
# 2.g What is the highest number of cases that have happened in a single county?
# Make sure to pull() this NUMBER `num_highest_cases_county`
num_highest_cases_county <- counties %>%
filter(cases == max(cases)) %>%
pull(cases)
# 2.h Which county had this highest number of cases? Make sure to pull() this
# COUNTY `county_highest_cases`
county_highest_cases <- counties %>%
filter(cases == max(cases)) %>%
pull(county)
# 2.i Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together, in
# this form: "COUNTY, STATE".
# Therefore, add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
counties <- counties %>%
mutate(location = paste0(county, ", ", state))
# 2.j What is the name of the location (county, state) with the highest number
# of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>%
filter(deaths == max(deaths, na.rm = TRUE)) %>%
pull(location)
#  Write code (at least 2-3 lines) that will answer your question
earliest_state_case_date <- states %>%
group_by(state) %>%
filter(date == min(date, na.rm = TRUE)) %>%
select(state, date)
earliest_case_state <- states %>%
filter(date == min(date, na.rm = TRUE)) %>%
pull(state)
library(ggplot2)
library(dplyr)
state_vacc <- read.csv("us_state_vaccinations.csv", stringsAsFactors = FALSE)
state_vacc$date <- as.Date(state_vacc$date)
state_vacc$location <- c("California", "American Samoa", "Washington", "New York", "Pennsylvania")
selected_states <- c("California", "American Samoa", "Washington", "New York", "Pennsylvania")
state_selected <- c("California", "American Samoa", "Washington", "New York", "Pennsylvania")
state_filter <- state_vacc %>%
filter(location %in% state_selected) %>%
group_by(location, year)
state_filter <- state_vacc %>%
filter(location %in% state_selected) %>%
group_by(location)
View(state_filter)
ggplot(state_filter, aes(x = year, y = total_vaccinations, color = location)) +
geom_line() +
labs(title = "Total Vaccination Change",
x = "Year",
y = "Total Vaccinations") +
scale_x_continuous(breaks = seq(2021, 2023, 1), labels = as.character(seq(2021, 2023, 1))) +
scale_color_manual(values = c("California" = "red", "American Samoa" = "black", "Washington" = "blue", "New York" = "green", "Pennsylvania" = "cyan"))
ggplot(state_filter, aes(x = date, y = total_vaccinations, color = location)) +
geom_line() +
labs(title = "Total Vaccination Change",
x = "Year",
y = "Total Vaccinations") +
scale_x_continuous(breaks = seq(2021, 2023, 1), labels = as.character(seq(2021, 2023, 1))) +
scale_color_manual(values = c("California" = "red", "American Samoa" = "black", "Washington" = "blue", "New York" = "green", "Pennsylvania" = "cyan"))
state_filter <- state_vacc %>%
filter(location %in% state_selected) %>%
group_by(location, year)
state_filter <- state_vacc %>%
filter(location %in% state_selected) %>%
group_by(location, state_vacc$date$year)
state_filter <- state_vacc %>%
filter(location %in% state_selected) %>%
group_by(location, state_vacc$date)
library(ggplot2)
library(dplyr)
vaccinations <- read.csv("us_state_vaccinations.csv")
# Filter the data for selected states and time period
selected_states <- c("California", "Washington", "Alabama")
start_date <- as.Date("2021-01-01")
end_date <- as.Date("2023-12-31")
filtered_data <- vaccinations %>%
filter(location %in% selected_states,
date >= start_date,
date <= end_date)
summarized_data <- filtered_data %>%
group_by(location, year) %>%
summarise(total_vaccinations = sum(total_vaccinations)) %>%
ungroup()
library(ggplot2)
library(dplyr)
state_vacc <- read.csv("us_state_vaccinations.csv", stringsAsFactors = FALSE)
state_vacc$date <- as.Date(state_vacc$date)
state_selected <- c("California", "American Samoa", "Washington", "New York", "Pennsylvania")
state_filter <- state_vacc %>%
filter(location %in% state_selected) %>%
group_by(location, date)
ggplot(state_filter, aes(x = date, y = total_vaccinations, color = location)) +
geom_line() +
labs(title = "Total Vaccinations",
x = "Date",
y = "Total Vaccinations") +
scale_x_date(date_labels = "%Y-%m-%d", date_breaks = "6 months") +
scale_color_manual(values = c("California" = "red", "American Samoa" = "black", "Washington" = "blue", "New York" = "green", "Pennsylvania" = "cyan"))
state_filter <- state_vacc %>%
filter(location %in% state_selected & !is.na(total_vaccinations)) %>%
group_by(location, date)
ggplot(state_filter, aes(x = date, y = total_vaccinations, color = location)) +
geom_line() +
labs(title = "Total Vaccinations",
x = "Date",
y = "Total Vaccinations") +
scale_x_date(date_labels = "%Y-%m-%d", date_breaks = "6 months") +
scale_color_manual(values = c("California" = "red", "American Samoa" = "black", "Washington" = "blue", "New York" = "green", "Pennsylvania" = "cyan"))
ggplot(state_filter, aes(x = date, y = total_vaccinations, color = location)) +
geom_line() +
labs(title = "Total Vaccinations",
x = "Date",
y = "Total Vaccinations") +
scale_x_date(date_labels = "%Y-%m-%d", date_breaks = "6 months") +
scale_color_manual(values = c("California" = "red", "American Samoa" = "yellow", "Washington" = "blue", "New York" = "green", "Pennsylvania" = "cyan"))
View(state_filter)
state_selected <- c("California", "American Samoa", "Washington", "New York State", "Pennsylvania")
state_filter <- state_vacc %>%
filter(location %in% state_selected & !is.na(total_vaccinations)) %>%
group_by(location, date)
ggplot(state_filter, aes(x = date, y = total_vaccinations, color = location)) +
geom_line() +
labs(title = "Total Vaccinations",
x = "Date",
y = "Total Vaccinations") +
scale_x_date(date_labels = "%Y-%m-%d", date_breaks = "3 months") +
scale_color_manual(values = c("California" = "red", "American Samoa" = "yellow", "Washington" = "blue", "New York State" = "green", "Pennsylvania" = "cyan"))
ggplot(state_filter, aes(x = date, y = total_vaccinations, color = location)) +
geom_line() +
labs(title = "Total Vaccinations",
x = "Date",
y = "Total Vaccinations") +
scale_x_date(date_labels = "%Y-%m", date_breaks = "3 months") +
scale_color_manual(values = c("California" = "red", "American Samoa" = "yellow", "Washington" = "blue", "New York State" = "green", "Pennsylvania" = "cyan"))
ggplot(state_filter, aes(x = date, y = total_vaccinations, color = location)) +
geom_line() +
labs(title = "Total Vaccinations",
x = "Date",
y = "Total Vaccinations") +
scale_x_date(date_labels = "%Y-%m", date_breaks = "6 months") +
scale_color_manual(values = c("California" = "red", "American Samoa" = "yellow", "Washington" = "blue", "New York State" = "green", "Pennsylvania" = "cyan"))
View(state_filter)
