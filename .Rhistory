<<<<<<< HEAD
doses_used_percent <- sum(state_vacc$share_doses_used, na.rm = TRUE)
# Generate the summary paragraph
summary_paragraph <- paste("The total number of vaccinations administered across all states is:", comma(total_vaccinations),
"\nThe total number of vaccine doses distributed to the states is:", comma(total_distributed),
"\nThe percentage of people who have received at least one vaccine dose is:", percent(people_vaccinated_percent/100),
"\nThe percentage of people who are fully vaccinated per hundred individuals is:", percent(people_fully_vaccinated_percent/100),
"\nThe percentage of doses used is:", percent(doses_used_percent/100))
# Print the summary paragraph
cat(summary_paragraph)
library(dplyr)
=======
# Then, calculate the number of protests recorded in Washington
# Save the NUMBER of WA locations in a variable called `num_in_wa`
num_in_wa <- sum(str_detect(locations, "WA"))
# (3.d) What proportion of protests occurred in Washington?
# Divide the number of protests in Washington by the total number of protests
# Save this proportion in a variable called `prop_in_wa`
prop_in_wa <- num_in_wa / length(locations)
# (3.e) Now, using the same stringr function and building on the code that
# you've written above, write a function `count_protests_in_location()` that
# accepts a location and then returns (not prints) the following sentence:
# "There were [N] protests in [LOCATION]."
# For example: "There were 20 protests in Seattle." "There were 50 protests in
# NY."
# If the location is not found in the dataset, the function should return the
# sentence: "Sorry, that location is not found."
count_protest_in_location <- function(q) {
y <- sum(str_detect(locations, q))
if (y == 0) {
return("Sorry, that location is not found")
} else {
return(paste("There were ", y, " protests in ", q))
}
}
# (3.f) Use your `count_protests_in_location()` function above to compute the
# number of protests in "Washington, DC" and return the resulting message
# Save the resulting message in a variable called `dc_summary`
dc_summary <- count_protest_in_location("Washington, DC")
# (3.g) Use your function above to compute the number of protests in
# "Minneapolis" and return the resulting message
# # Save the resulting message in a variable called `minneapolis_summary`
minneapolis_summary <- count_protest_in_location("Minneapolis")
# (3.h) Let's try to find out how many protests occurred in each state. To do
# so, first use a stringr function to extract the last 2 characters from every
# location and use these 2 characters to create a new vector called `states`
states <- str_sub(locations, -2)
# (3.i) What are the unique states are in the dataset? Create a vector of just the
# unique states in the dataset
# Save the unique states in a variable called `uniq_states`
# Hint: Due to the way the data was collected, you may notice some "nonsense"
# state abbreviations, such as "CE." YOU DO NOT NEED TO FIX THIS, but you may
# reflect to yourself on why this might be happening.
uniq_states <- unique(states)
# (3.j) Now apply your `count_protests_in_location` function to every state in
# `uniq_states` by using the `sapply()` function.
# Store all your messages in a variable called `state_summary`
state_summary <- sapply(uniq_states, count_protest_in_location)
## Part 4: Dates (16 points) ---------------------------------------------------
# In this part, you will explore *when* protests happened.
# (4a) Extract the `Date` column and convert it into a data by using the
# `as.Date()` function.
# Save this value in a variable called `dates`
dates <- as.Date(protest_data$Date)
# (4.b) What is the most recent date in the dataset?
# Store this value in a variable called `most_recent_protest`
most_recent_protest <- max(dates)
# (4.c) What is the earliest date in the dataset?
# Store this value in a variable called `earliest_protest`
earliest_protest <- min(dates)
# (4.d) What is the timespan of the dataset â€” in other words, the distance
# between the earliest protest and most recent protest?
# Hint: R can do math with dates pretty well by default!
# Store this value in a variable called `time_span`
time_span <- most_recent_protest - earliest_protest
# (4.e) Now, create a vector of only the dates that are in 2020.
# Note: If you want only dates after a certain start date, you can use
# "2020-01-01" with comparison operators (==, >=, <=)
# Store this value in a variable called `protests_in_2020`
protests_in_2020 <- dates[str_detect(dates, "2020")]
# (4.f) Create a vector of only the dates that are in 2019.
# Note: If you want only dates after a certain start date, you can use
# "2020-01-01" with comparison operators (==, >=, <=)
# Store this value in a variable called `protests_in_2019`
protests_in_2019 <- dates[str_detect(dates, "2019")]
# (4.g) Create a vector of only the dates that are in 2018.
# Note: If you want only dates after a certain start date, you can use
# "2020-01-01" with comparison operators (==, >=, <=)
# Store this value in a variable called `protests_in_2018`
protests_in_2018 <- dates[str_detect(dates, "2018")]
# Reflection 2 (answer in the README.md file)
# When we're doing data analysis work, we always want to test our assumptions
# and see whether or not patterns align with our expectations or depart from them.
# Before actually calculating the number of protests that occurred in 2018,
# 2019, 2020, record your guesses for the following questions.
# Guess: Do you think there were more protests in 2019 than in 2018? Why or why not?
# Guess: Do you think there were more protests in 2020 than in 2019? Why or why not?
# (4.h) Now use the length() function to find out how many protests happened in
# 2018 vs. 2019 vs. 2020.
# Save them in the varaibles `num_protets_in_2018`, `num_protets_in_2019`,
# `num_protets_in_20120`
num_protests_in_2018 <- length(protests_in_2018)
num_protests_in_2019 <- length(protests_in_2019)
num_protests_in_2020 <- length(protests_in_2020)
# Reflection 3 (answer in the README.md file)
# Does the change in the number of protests from 2018 to 2019 to 2020 surprise
# you? Why or why not? What do you think explains the fluctuation?
## Part 5: Protest Purpose (6 points) ------------------------------------------
# In this section, you will explore *why* the protests happened.
# (5.a) Extract the `Event..legacy..see.tags.` column into a variable called
# `purposes`
purposes <- protest_data$Event..legacy..see.tags.
# (5.b) How many different unique purposes are listed in the dataset?
# Save this NUMBER in a variable called `num_purposes`
num_purposes <- length(unique(purposes))
# That's quite a few! Use View() to examine the `purposes` vector. You will
# notice a common pattern for each purpose, formatted something like this: Civil
# Rights (Transgender Rights)
# (5.c) To get a summary of just the higher level categories (e.g., just "Civil
# Rights" and not "(Transgender Rights)"), we're going to use some R functions
# to extract only the text before the parenthesis and then save them in a
# variable `high_level_purposes`
high_level_purposes <- gsub("\\(.*", "", purposes)
high_level_purposes <- trimws(high_level_purposes)
# There are some built-in R functions where you can replace text using regular
# expressions.
# Regular expressions are a special syntax that lets you match patterns.
# For example, see what happens when you run the code below, and use the help()
# function to learn more about this function
gsub("@.*", "", "melwalsh@uw.edu")
# Note: Some regular expression characters, like parenthesis, have a special
# meaning, so if you want to use them, you need to first "escape" them:
# https://uc-r.github.io/regex#metacharacters
# See what happens when you run the code below, and use the help() function to
# learn more about this function
trimws(" hello ")
# Make a table of your `high_level_protests` by using table() and then View() it
table(high_level_purposes)
# Reflection 4 (answer in README.md file): What is the first and fourth most
# frequent category of protest? Do these frequencies align with your sense of
# the major protest movements in the U.S. in the last few years? Why or why not? (3 points)
# Congrats! You're finished. Don't forget to save, push all changes to GitHub,
# and submit the link to your repository on Canvas!
print(high_level_purposes)
# (5.c) To get a summary of just the higher level categories (e.g., just "Civil
# Rights" and not "(Transgender Rights)"), we're going to use some R functions
# to extract only the text before the parenthesis and then save them in a
# variable `high_level_purposes`
high_level_purposes <- trimwsgsub("\\(.*", "", purposes)
# (5.c) To get a summary of just the higher level categories (e.g., just "Civil
# Rights" and not "(Transgender Rights)"), we're going to use some R functions
# to extract only the text before the parenthesis and then save them in a
# variable `high_level_purposes`
high_level_purposes <- trimws(gsub("\\(.*", "", purposes)
# (5.c) To get a summary of just the higher level categories (e.g., just "Civil
# Rights" and not "(Transgender Rights)"), we're going to use some R functions
# to extract only the text before the parenthesis and then save them in a
# variable `high_level_purposes`
high_level_purposes <- trimws(gsub("\\(.*", "", purposes))
# (5.c) To get a summary of just the higher level categories (e.g., just "Civil
# Rights" and not "(Transgender Rights)"), we're going to use some R functions
# to extract only the text before the parenthesis and then save them in a
# variable `high_level_purposes`
high_level_purposes <- trimws(gsub("\\(.*", "", purposes))
print(high_level_purposes)
# (5.c) To get a summary of just the higher level categories (e.g., just "Civil
# Rights" and not "(Transgender Rights)"), we're going to use some R functions
# to extract only the text before the parenthesis and then save them in a
# variable `high_level_purposes`
high_level_purposes <- trimws(gsub("\\(.*", "", purposes))
# (4.h) Now use the length() function to find out how many protests happened in
# 2018 vs. 2019 vs. 2020.
# Save them in the varaibles `num_protets_in_2018`, `num_protets_in_2019`,
# `num_protets_in_20120`
num_protests_in_2018 <- length(protests_in_2018)
# (5.b) How many different unique purposes are listed in the dataset?
# Save this NUMBER in a variable called `num_purposes`
num_purposes <- length(unique(purposes))
# (5.c) To get a summary of just the higher level categories (e.g., just "Civil
# Rights" and not "(Transgender Rights)"), we're going to use some R functions
# to extract only the text before the parenthesis and then save them in a
# variable `high_level_purposes`
high_level_purposes <- trimws(gsub("\\(.*", "", purposes))
# (5.a) Extract the `Event..legacy..see.tags.` column into a variable called
# `purposes`
purposes <- (Event..legacy..see.tags.)
# (5.a) Extract the `Event..legacy..see.tags.` column into a variable called
# `purposes`
purposes <- ("Event..legacy..see.tags.")
# (5.b) How many different unique purposes are listed in the dataset?
# Save this NUMBER in a variable called `num_purposes`
num_purposes <- length(unique(purposes))
# (5.c) To get a summary of just the higher level categories (e.g., just "Civil
# Rights" and not "(Transgender Rights)"), we're going to use some R functions
# to extract only the text before the parenthesis and then save them in a
# variable `high_level_purposes`
high_level_purposes <- trimws(gsub("\\(.*", "", purposes))
print(purposes)
# (5.a) Extract the `Event..legacy..see.tags.` column into a variable called
# `purposes`
purposes <- protest_data$`Event (legacy; see tags)`
# (5.a) Extract the `Event..legacy..see.tags.` column into a variable called
# `purposes`
purposes <- protest_data$`Event (legacy; see tags)`
# (5.c) To get a summary of just the higher level categories (e.g., just "Civil
# Rights" and not "(Transgender Rights)"), we're going to use some R functions
# to extract only the text before the parenthesis and then save them in a
# variable `high_level_purposes`
high_level_purposes <- trimws(gsub("\\(.*", "", purposes))
high_level_purposes
# Make a table of your `high_level_protests` by using table() and then View() it
table(high_level_purposes)
print(num_locations)
# (3.b) How many *unique* locations are in the dataset?
# Save the NUMBER of unique locations in a variable called `num_locations`
num_locations <- length(unique(locations))
print(num_locations)
# (5.a) Extract the `Event..legacy..see.tags.` column into a variable called
# `purposes`
purposes <- protest_data$`Event (legacy; see tags)`
# (5.a) Extract the `Event..legacy..see.tags.` column into a variable called
# `purposes`
purposes <- protest_data$`Event (legacy; see tags)`
print(purposes)
# Overview ----------------------------------------------------------------
# Assignment 1
# You will answer the following questions and more by completing the code below:
# - What were the most attended and least attended protests in the US in the
#   last 5 years?
# - How many protests occurred in Washington state?
# - How did protests in 2019 compare to 2020, and why?
# - What are the biggest reasons people are protesting in the US?
# For each question/prompt, write the necessary code to get the answer. Each
# question is worth 2 points.
# You will store most of your answers in the variable names listed with the
# questions in `backtics`.
# There are 4 prompts marked `Reflection`. Be sure to write your responses to
# these questions in the `README.md` file.
# NOTE: We recommend that you turn on "Soft Wrap Long Lines" to work with this
# file so you can read the instructions more easily.
# Part 1: Set up (12 points) ---------------------------------------------------
# In this section, you will load the CountLove data and necessary packages.
# (1.a) Load the `stringr` package, which you will use later.
library(stringr)
# (1.b) Load the data from CountLove by using the following URL:
# https://countlove.org/data/data.csv
# Save this dataframe into a variable called `protest_data`
url <- "https://countlove.org/data/data.csv"
protest_data <- read_csv(url)
#  Whenever we load data, the first thing we want to do is manually examine it,
# see how it looks, and make sure we understand what each column (or feature)
# and each row (or record) in the dataset means.
# Open the dataframe by clicking the spreadsheet icon in the Environment or by
# using View(). Manually examine the data by scrolling through it.
View(protest_data)
# (1.c) Without using code, look at all the the column names in the dataset, and
# then type each column name in the comment below, with each column name
# separated by a comma.
# Column 1, Column 2, Column 3...
# Data, Location, Attendees, Event, Tags, Curated, Source, Total Articles
# (1.d) Without using code, pick one row in the dataset (any row!), and then
# type in all the values from that row, with each value separated by a comma.
# For ex: 2018-01-01, University of Washington, Seattle, WA...
# 2017-01-16, Johnson City, TN, 300, Civil Rights, Civil Rights; For racial justice; Martin Luther King, Jr., Yes, http://www.johnsoncitypress.com/Local/2017/01/16/Hundreds-march-to-honor-Martin-Luther-King-Jr-in-Johnson-City.html?ci=featured&lp=46&ti=
#, 4
# (1.e) How many protests are recorded in the dataset in total? Use an R
# function to determine this number and then save it in a variable called
# `num_protests`
# Hint: This is the same number as the number of rows in the dataset!
num_protests <- nrow(protest_data)
cat("The total number of protests recorded in the dataset is", num_protests, ".\n")
# (1.f) How many features (or columns) are recorded for each protest? It's
# important to know how to find this number programmatically as well as manually
# Save the number of features for each protest in a variable called
# `num_features`
num_features <- ncol(protest_data)
print(num_features)
# There are 8 features
## Part 2: Attendees (12 points) -----------------------------------------------
# In this part, you will explore the number of people who participated in the protests
# (2.a) Extract the `Attendees` column into a variable called `num_attendees`
num_attendees <- protest_data$Attendees
# (2.b) What is the fewest number of attendees at a protest?
min_attendees <- min(num_attendees, na.rm = T)
print(min_attendees)
# 0
# Save the number of protests in a variable called `min_attendees`
# Hint: Remember to exclude NA values when using the functions below!
# (2.c) What is the greatest number of attendees at a protest?
# Save the number of protests in a variable called `max_attendees`
max_attendees <- max(num_attendees, na.rm = T)
# 725000
# (2.d) What is the average (mean) number of attendees at a protest?
# Save the number of protests in a variable called `mean_attendees`
mean_attendees <- mean(num_attendees, na.rm = T)
mean_attendees <- round(mean_attendees, digits = 0)
# mean = 644
# (2.e) What is the median number of attendees?
# Save the number of protests in a variable called `median_attendees`
# Median is 100 attendes
median_attendees <- median(num_attendees, na.rm = T)
# (2.f) What is the difference between the mean and median number of attendees?
# Subtract median_attendees from mean_attendees
# Save the difference in a variable called `difference_attendees`
difference_atendees <- mean_attendees - median_attendees
# Reflection 1 (answer in the README.md file)
# Why do you think the mean is higher than the median? Which metric would you
# use in a report about this data, and why?
## Part 3: Locations (20 points) -----------------------------------------------
# In this part, you will explore where protests happened.
# (3.a) Extract the `Location` column into a variable called `locations`
locations <- protest_data$Location
# (3.b) How many *unique* locations are in the dataset?
# Save the NUMBER of unique locations in a variable called `num_locations`
num_locations <- length(unique(locations))
print(num_locations)
# (3.c) How many protests occurred in the state of Washington?
# Use a function from the stringr package to detect the letters "WA" in the
library(stringr)
# Location column and filter to only keep WA locations
# Then, calculate the number of protests recorded in Washington
# Save the NUMBER of WA locations in a variable called `num_in_wa`
num_in_wa <- sum(str_detect(locations, "WA"))
# (3.d) What proportion of protests occurred in Washington?
# Divide the number of protests in Washington by the total number of protests
# Save this proportion in a variable called `prop_in_wa`
prop_in_wa <- num_in_wa / length(locations)
# (3.e) Now, using the same stringr function and building on the code that
# you've written above, write a function `count_protests_in_location()` that
# accepts a location and then returns (not prints) the following sentence:
# "There were [N] protests in [LOCATION]."
# For example: "There were 20 protests in Seattle." "There were 50 protests in
# NY."
# If the location is not found in the dataset, the function should return the
# sentence: "Sorry, that location is not found."
count_protest_in_location <- function(q) {
y <- sum(str_detect(locations, q))
if (y == 0) {
return("Sorry, that location is not found")
} else {
return(paste("There were ", y, " protests in ", q))
}
}
# (3.f) Use your `count_protests_in_location()` function above to compute the
# number of protests in "Washington, DC" and return the resulting message
# Save the resulting message in a variable called `dc_summary`
dc_summary <- count_protest_in_location("Washington, DC")
# (3.g) Use your function above to compute the number of protests in
# "Minneapolis" and return the resulting message
# # Save the resulting message in a variable called `minneapolis_summary`
minneapolis_summary <- count_protest_in_location("Minneapolis")
# (3.h) Let's try to find out how many protests occurred in each state. To do
# so, first use a stringr function to extract the last 2 characters from every
# location and use these 2 characters to create a new vector called `states`
states <- str_sub(locations, -2)
# (3.i) What are the unique states are in the dataset? Create a vector of just the
# unique states in the dataset
# Save the unique states in a variable called `uniq_states`
# Hint: Due to the way the data was collected, you may notice some "nonsense"
# state abbreviations, such as "CE." YOU DO NOT NEED TO FIX THIS, but you may
# reflect to yourself on why this might be happening.
uniq_states <- unique(states)
# (3.j) Now apply your `count_protests_in_location` function to every state in
# `uniq_states` by using the `sapply()` function.
# Store all your messages in a variable called `state_summary`
state_summary <- sapply(uniq_states, count_protest_in_location)
## Part 4: Dates (16 points) ---------------------------------------------------
# In this part, you will explore *when* protests happened.
# (4a) Extract the `Date` column and convert it into a data by using the
# `as.Date()` function.
# Save this value in a variable called `dates`
dates <- as.Date(protest_data$Date)
# (4.b) What is the most recent date in the dataset?
# Store this value in a variable called `most_recent_protest`
most_recent_protest <- max(dates)
# (4.c) What is the earliest date in the dataset?
# Store this value in a variable called `earliest_protest`
earliest_protest <- min(dates)
# (4.d) What is the timespan of the dataset â€” in other words, the distance
# between the earliest protest and most recent protest?
# Hint: R can do math with dates pretty well by default!
# Store this value in a variable called `time_span`
time_span <- most_recent_protest - earliest_protest
# (4.e) Now, create a vector of only the dates that are in 2020.
# Note: If you want only dates after a certain start date, you can use
# "2020-01-01" with comparison operators (==, >=, <=)
# Store this value in a variable called `protests_in_2020`
protests_in_2020 <- dates[str_detect(dates, "2020")]
# (4.f) Create a vector of only the dates that are in 2019.
# Note: If you want only dates after a certain start date, you can use
# "2020-01-01" with comparison operators (==, >=, <=)
# Store this value in a variable called `protests_in_2019`
protests_in_2019 <- dates[str_detect(dates, "2019")]
# (4.g) Create a vector of only the dates that are in 2018.
# Note: If you want only dates after a certain start date, you can use
# "2020-01-01" with comparison operators (==, >=, <=)
# Store this value in a variable called `protests_in_2018`
protests_in_2018 <- dates[str_detect(dates, "2018")]
# Reflection 2 (answer in the README.md file)
# When we're doing data analysis work, we always want to test our assumptions
# and see whether or not patterns align with our expectations or depart from them.
# Before actually calculating the number of protests that occurred in 2018,
# 2019, 2020, record your guesses for the following questions.
# Guess: Do you think there were more protests in 2019 than in 2018? Why or why not?
# Guess: Do you think there were more protests in 2020 than in 2019? Why or why not?
# (4.h) Now use the length() function to find out how many protests happened in
# 2018 vs. 2019 vs. 2020.
# Save them in the varaibles `num_protets_in_2018`, `num_protets_in_2019`,
# `num_protets_in_20120`
num_protests_in_2018 <- length(protests_in_2018)
num_protests_in_2019 <- length(protests_in_2019)
num_protests_in_2020 <- length(protests_in_2020)
# Reflection 3 (answer in the README.md file)
# Does the change in the number of protests from 2018 to 2019 to 2020 surprise
# you? Why or why not? What do you think explains the fluctuation?
## Part 5: Protest Purpose (6 points) ------------------------------------------
# In this section, you will explore *why* the protests happened.
# (5.a) Extract the `Event..legacy..see.tags.` column into a variable called
# `purposes`
purposes <- protest_data$`Event (legacy; see tags)`
# (5.b) How many different unique purposes are listed in the dataset?
# Save this NUMBER in a variable called `num_purposes`
num_purposes <- length(unique(purposes))
# That's quite a few! Use View() to examine the `purposes` vector. You will
# notice a common pattern for each purpose, formatted something like this: Civil
# Rights (Transgender Rights)
# (5.c) To get a summary of just the higher level categories (e.g., just "Civil
# Rights" and not "(Transgender Rights)"), we're going to use some R functions
# to extract only the text before the parenthesis and then save them in a
# variable `high_level_purposes`
high_level_purposes <- trimws(gsub("\\(.*", "", purposes))
# There are some built-in R functions where you can replace text using regular
# expressions.
# Regular expressions are a special syntax that lets you match patterns.
# For example, see what happens when you run the code below, and use the help()
# function to learn more about this function
gsub("@.*", "", "melwalsh@uw.edu")
# Note: Some regular expression characters, like parenthesis, have a special
# meaning, so if you want to use them, you need to first "escape" them:
# https://uc-r.github.io/regex#metacharacters
# See what happens when you run the code below, and use the help() function to
# learn more about this function
trimws(" hello ")
# Make a table of your `high_level_protests` by using table() and then View() it
table(high_level_purposes)
# Reflection 4 (answer in README.md file): What is the first and fourth most
# frequent category of protest? Do these frequencies align with your sense of
# the major protest movements in the U.S. in the last few years? Why or why not? (3 points)
# Congrats! You're finished. Don't forget to save, push all changes to GitHub,
# and submit the link to your repository on Canvas!
# Make a table of your `high_level_protests` by using table() and then View() it
table(high_level_purposes)
source("~/Desktop/INF0201/exploratory-analysis-ssshenjy/Sidschart.R")
setwd("~/Desktop/INF0201/exploratory-analysis-ssshenjy")
state_vaccinations <- read.csv("us_state_vaccinations.csv") %>%
filter(as.Date(date) == "2023-05-10") %>%
mutate(ratio = total_vaccinations / total_distributed)
bar_chart <- ggplot(top_states, aes(x = reorder(location, -ratio), y = ratio)) +
geom_bar(stat = "identity", fill = "red") +
labs(title = "Top 10 States with Highest Vaccination Ratio",
x = "State",
y = "Vaccination Ratio") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
top_states <- state_vaccinations %>%
arrange(desc(ratio)) %>%
head(10)
bar_chart <- ggplot(top_states, aes(x = reorder(location, -ratio), y = ratio)) +
geom_bar(stat = "identity", fill = "red") +
labs(title = "Top 10 States with Highest Vaccination Ratio",
x = "State",
y = "Vaccination Ratio") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(bar_chart)
# Here is my bar chart
bar_chart <- ggplot(top_states, aes(x = reorder(location, -ratio), y = ratio)) +
geom_bar(stat = "identity", fill = "red") +
labs(title = "Top 10 Entities with Highest Vaccination Ratio",
x = "State",
y = "Vaccination Ratio") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
bar_chart <- ggplot(top_states, aes(x = reorder(location, -ratio), y = ratio)) +
geom_bar(stat = "identity", fill = "red") +
labs(title = "Top 10 Entities with Highest Vaccination Ratio",
x = "State",
y = "Vaccination Ratio") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Display the bar chart
print(bar_chart)
library(tidyverse)
>>>>>>> f6500d44d94bf8eefde97fbe9ceece2399c8b69d
library(scales)
library(tidyverse)
# Read the dataset
state_vacc <- read.csv("us_state_vaccinations.csv", stringsAsFactors = FALSE)
<<<<<<< HEAD
# Calculate the total vaccinations
total_vaccinations <- sum(state_vacc$total_vaccinations, na.rm = TRUE)
# Calculate the total distributed doses
total_distributed <- sum(state_vacc$total_distributed, na.rm = TRUE)
# Calculate the percentage of people vaccinated
people_vaccinated_percent <- sum(state_vacc$people_vaccinated_per_hundred, na.rm = TRUE)
# Calculate the percentage of people fully vaccinated per hundred
people_fully_vaccinated_percent <- sum(state_vacc$people_fully_vaccinated_per_hundred, na.rm = TRUE)
# Calculate the percentage of doses used
doses_used_percent <- sum(state_vacc$share_doses_used, na.rm = TRUE)
# Generate the summary paragraph
summary_paragraph <- paste("The total number of vaccinations administered across all states is:", comma(total_vaccinations),
"\nThe total number of vaccine doses distributed to the states is:", comma(total_distributed),
"\nThe percentage of people who have received at least one vaccine dose is:", percent(people_vaccinated_percent/100),
"\nThe percentage of people who are fully vaccinated per hundred individuals is:", percent(people_fully_vaccinated_percent/100),
"\nThe percentage of doses used is:", percent(doses_used_percent/100))
# Print the summary paragraph
cat(summary_paragraph)
library(dplyr)
library(scales)
library(tidyverse)
# Read the dataset
state_vacc <- read.csv("us_state_vaccinations.csv", stringsAsFactors = FALSE)
# Calculate the total vaccinations
total_vaccinations <- sum(state_vacc$total_vaccinations, na.rm = TRUE)
# Calculate the total distributed doses
total_distributed <- sum(state_vacc$total_distributed, na.rm = TRUE)
# Calculate the percentage of people vaccinated
people_vaccinated_percent <- sum(state_vacc$people_vaccinated_per_hundred, na.rm = TRUE)
# Calculate the percentage of people fully vaccinated per hundred
people_fully_vaccinated_percent <- sum(state_vacc$people_fully_vaccinated_per_hundred, na.rm = TRUE)
# Calculate the percentage of doses used
doses_used_percent <- sum(state_vacc$share_doses_used, na.rm = TRUE)
# Generate the summary paragraph
summary_paragraph <- paste("The total number of vaccinations administered across all states is:", comma(total_vaccinations),
"\nThe total number of vaccine doses distributed to the states is:", comma(total_distributed),
"\nThe percentage of people who have received at least one vaccine dose is:", percent(people_vaccinated_percent/100),
"\nThe percentage of people who are fully vaccinated per hundred individuals is:", percent(people_fully_vaccinated_percent/100),
"\nThe percentage of doses used is:", percent(doses_used_percent/100))
# Print the summary paragraph
cat(summary_paragraph)
library(dplyr)
library(scales)
library(tidyverse)
# Read the dataset
state_vacc <- read.csv("us_state_vaccinations.csv", stringsAsFactors = FALSE)
# Calculate the total vaccinations
total_vaccinations <- sum(state_vacc$total_vaccinations, na.rm = TRUE)
# Calculate the total distributed doses
total_distributed <- sum(state_vacc$total_distributed, na.rm = TRUE)
# Calculate the percentage of people vaccinated
people_vaccinated_percent <- sum(state_vacc$people_vaccinated_per_hundred, na.rm = TRUE)
# Calculate the percentage of people fully vaccinated per hundred
people_fully_vaccinated_percent <- sum(state_vacc$people_fully_vaccinated_per_hundred, na.rm = TRUE)
# Calculate the percentage of doses used
doses_used_percent <- sum(state_vacc$share_doses_used, na.rm = TRUE)
# Generate the summary paragraph
summary_paragraph <- paste("The total number of vaccinations administered across all states is:", comma(total_vaccinations),
"\nThe total number of vaccine doses distributed to the states is:", comma(total_distributed),
"\nThe percentage of people who have received at least one vaccine dose is:", percent(people_vaccinated_percent/100),
"\nThe percentage of people who are fully vaccinated per hundred individuals is:", percent(people_fully_vaccinated_percent/100),
"\nThe percentage of doses used is:", percent(doses_used_percent/100))
# Print the summary paragraph
cat(summary_paragraph)
library(dplyr)
library(scales)
library(tidyverse)
# Read the dataset
state_vacc <- read.csv("us_state_vaccinations.csv", stringsAsFactors = FALSE)
# Calculate the total vaccinations
total_vaccinations <- sum(state_vacc$total_vaccinations, na.rm = TRUE)
# Calculate the total distributed doses
total_distributed <- sum(state_vacc$total_distributed, na.rm = TRUE)
# Calculate the percentage of people vaccinated
people_vaccinated_percent <- sum(state_vacc$people_vaccinated_per_hundred, na.rm = TRUE)
# Calculate the percentage of people fully vaccinated per hundred
people_fully_vaccinated_percent <- sum(state_vacc$people_fully_vaccinated_per_hundred, na.rm = TRUE)
# Calculate the percentage of doses used
doses_used_percent <- sum(state_vacc$share_doses_used, na.rm = TRUE)
# Generate the summary paragraph
summary_paragraph <- paste("The total number of vaccinations administered across all states is:", comma(total_vaccinations),
"\nThe total number of vaccine doses distributed to the states is:", comma(total_distributed),
"\nThe percentage of people who have received at least one vaccine dose is:", people_vaccinated_percent, "%",
"\nThe percentage of people who are fully vaccinated per hundred individuals is:", people_fully_vaccinated_percent, "%",
"\nThe percentage of doses used is:", doses_used_percent, "%")
# Print the summary paragraph
cat(summary_paragraph)
library(dplyr)
library(scales)
library(tidyverse)
# Read the dataset
state_vacc <- read.csv("us_state_vaccinations.csv", stringsAsFactors = FALSE)
# Calculate the total vaccinations
total_vaccinations <- sum(state_vacc$total_vaccinations, na.rm = TRUE)
# Calculate the total distributed doses
total_distributed <- sum(state_vacc$total_distributed, na.rm = TRUE)
# Calculate the percentage of people vaccinated
people_vaccinated_percent <- mean(state_vacc$people_vaccinated_per_hundred, na.rm = TRUE)
# Calculate the percentage of people fully vaccinated per hundred
people_fully_vaccinated_percent <- mean(state_vacc$people_fully_vaccinated_per_hundred, na.rm = TRUE)
# Calculate the percentage of doses used
doses_used_percent <- mean(state_vacc$share_doses_used, na.rm = TRUE)
# Generate the summary paragraph
summary_paragraph <- paste("The total number of vaccinations administered across all states is:", comma(total_vaccinations),
"\nThe total number of vaccine doses distributed to the states is:", comma(total_distributed),
"\nThe percentage of people who have received at least one vaccine dose is:", percent(people_vaccinated_percent/100),
"\nThe percentage of people who are fully vaccinated per hundred individuals is:", percent(people_fully_vaccinated_percent/100),
"\nThe percentage of doses used is:", percent(doses_used_percent/100))
# Print the summary paragraph
cat(summary_paragraph)
library(dplyr)
library(scales)
library(tidyverse)
# Read the dataset
state_vacc <- read.csv("us_state_vaccinations.csv", stringsAsFactors = FALSE)
# Calculate the total vaccinations
total_vaccinations <- sum(state_vacc$total_vaccinations, na.rm = TRUE)
# Calculate the total distributed doses
total_distributed <- sum(state_vacc$total_distributed, na.rm = TRUE)
# Calculate the percentage of people vaccinated
people_vaccinated_percent <- mean(state_vacc$people_vaccinated_per_hundred, na.rm = TRUE)
# Calculate the percentage of people fully vaccinated per hundred
people_fully_vaccinated_percent <- mean(state_vacc$people_fully_vaccinated_per_hundred, na.rm = TRUE)
# Calculate the percentage of doses used
doses_used_percent <- mean(state_vacc$share_doses_used, na.rm = TRUE)
# Generate the summary paragraph
summary_paragraph <- paste("The total number of vaccinations administered across all states is:", comma(total_vaccinations),
"\nThe total number of vaccine doses distributed to the states is:", comma(total_distributed),
"\nThe percentage of people who have received at least one vaccine dose is:", percent(people_vaccinated_percent/100),
"\nThe percentage of people who are fully vaccinated per hundred individuals is:", percent(people_fully_vaccinated_percent/100),
"\nThe percentage of doses used is:", percent(doses_used_percent/100))
# Print the summary paragraph
cat(summary_paragraph)
library(dplyr)
library(scales)
library(tidyverse)
# Read the dataset
state_vacc <- read.csv("us_state_vaccinations.csv", stringsAsFactors = FALSE)
# Calculate the total vaccinations
total_vaccinations <- sum(state_vacc$total_vaccinations, na.rm = TRUE)
# Calculate the total distributed doses
total_distributed <- sum(state_vacc$total_distributed, na.rm = TRUE)
# Calculate the percentage of people vaccinated
people_vaccinated_percent <- mean(state_vacc$people_vaccinated_per_hundred, na.rm = TRUE)
# Calculate the percentage of people fully vaccinated per hundred
people_fully_vaccinated_percent <- mean(state_vacc$people_fully_vaccinated_per_hundred, na.rm = TRUE)
# Calculate the percentage of doses used
doses_used_percent <- mean(state_vacc$share_doses_used, na.rm = TRUE)
# Generate the summary paragraph
summary_paragraph <- paste("The total number of vaccinations administered across all states is:", comma(total_vaccinations),
"\nThe total number of vaccine doses distributed to the states is:", comma(total_distributed),
"\nThe percentage of people who have received at least one vaccine dose is:", percent(people_vaccinated_percent/100),
"\nThe percentage of people who are fully vaccinated per hundred individuals is:", percent(people_fully_vaccinated_percent),
"\nThe percentage of doses used is:", percent(doses_used_percent))
# Print the summary paragraph
cat(summary_paragraph)
library(dplyr)
library(scales)
library(tidyverse)
# Read the dataset
state_vacc <- read.csv("us_state_vaccinations.csv", stringsAsFactors = FALSE)
# Calculate the total vaccinations
total_vaccinations <- sum(state_vacc$total_vaccinations, na.rm = TRUE)
# Calculate the total distributed doses
total_distributed <- sum(state_vacc$total_distributed, na.rm = TRUE)
# Calculate the percentage of people vaccinated
people_vaccinated_percent <- mean(state_vacc$people_vaccinated_per_hundred, na.rm = TRUE)
# Calculate the percentage of people fully vaccinated per hundred
people_fully_vaccinated_percent <- mean(state_vacc$people_fully_vaccinated_per_hundred, na.rm = TRUE)
# Calculate the percentage of doses used
doses_used_percent <- mean(state_vacc$share_doses_used, na.rm = TRUE)
# Generate the summary paragraph
summary_paragraph <- paste("The total number of vaccinations administered across all states is:", comma(total_vaccinations),
"\nThe total number of vaccine doses distributed to the states is:", comma(total_distributed),
"\nThe percentage of people who have received at least one vaccine dose is:", percent(people_vaccinated_percent/100),
"\nThe percentage of people who are fully vaccinated per hundred individuals is:", percent(people_fully_vaccinated_percent),
"\nThe percentage of doses used is:", percent(doses_used_percent))
# Print the summary paragraph
cat(summary_paragraph)
library(dplyr)
library(scales)
library(tidyverse)
# Read the dataset
state_vacc <- read.csv("us_state_vaccinations.csv", stringsAsFactors = FALSE)
# Calculate the total vaccinations
total_vaccinations <- sum(state_vacc$total_vaccinations, na.rm = TRUE)
# Calculate the total distributed doses
total_distributed <- sum(state_vacc$total_distributed, na.rm = TRUE)
# Calculate the percentage of people vaccinated
people_vaccinated_percent <- mean(state_vacc$people_vaccinated_per_hundred, na.rm = TRUE)
# Calculate the percentage of people fully vaccinated per hundred
people_fully_vaccinated_percent <- mean(state_vacc$people_fully_vaccinated_per_hundred, na.rm = TRUE)
# Calculate the percentage of doses used
doses_used_percent <- mean(state_vacc$share_doses_used, na.rm = TRUE)
# Generate the summary paragraph
summary_paragraph <- paste("The total number of vaccinations administered across all states is:", comma(total_vaccinations),
"\nThe total number of vaccine doses distributed to the states is:", comma(total_distributed),
"\nThe percentage of people who have received at least one vaccine dose is:", percent(people_vaccinated_percent/100),
"\nThe percentage of people who are fully vaccinated per hundred individuals is:", percent(people_fully_vaccinated_percent/100),
"\nThe percentage of doses used is:", percent(doses_used_percent/100))
# Print the summary paragraph
cat(summary_paragraph)
# Read the dataset
state_vacc <- read.delim("us_state_vaccinations.csv", stringsAsFactors = FALSE)
library(dplyr)
library(scales)
library(tidyverse)
# Read the dataset
state_vacc <- read.delim("us_state_vaccinations.csv", stringsAsFactors = FALSE)
# Calculate the total vaccinations
total_vaccinations <- sum(state_vacc$total_vaccinations, na.rm = TRUE)
# Calculate the total distributed doses
total_distributed <- sum(state_vacc$total_distributed, na.rm = TRUE)
# Calculate the percentage of people vaccinated
people_vaccinated_percent <- mean(state_vacc$people_vaccinated_per_hundred, na.rm = TRUE)
# Calculate the percentage of people fully vaccinated per hundred
people_fully_vaccinated_percent <- mean(state_vacc$people_fully_vaccinated_per_hundred, na.rm = TRUE)
# Calculate the percentage of doses used
doses_used_percent <- mean(state_vacc$share_doses_used, na.rm = TRUE)
# Generate the summary paragraph
summary_paragraph <- paste("The total number of vaccinations administered across all states is:", comma(total_vaccinations),
"\nThe total number of vaccine doses distributed to the states is:", comma(total_distributed),
"\nThe percentage of people who have received at least one vaccine dose is:", percent(people_vaccinated_percent/100),
"\nThe percentage of people who are fully vaccinated per hundred individuals is:", percent(people_fully_vaccinated_percent/100),
"\nThe percentage of doses used is:", percent(doses_used_percent/100))
# Print the summary paragraph
cat(summary_paragraph)
csv
library(dplyr)
library(scales)
library(tidyverse)
# Read the dataset
state_vacc <- read.csv("us_state_vaccinations.csv", stringsAsFactors = FALSE)
# Calculate the total vaccinations
total_vaccinations <- sum(state_vacc$total_vaccinations, na.rm = TRUE)
# Calculate the total distributed doses
total_distributed <- sum(state_vacc$total_distributed, na.rm = TRUE)
# Calculate the percentage of people vaccinated
people_vaccinated_percent <- mean(state_vacc$people_vaccinated_per_hundred, na.rm = TRUE)
# Calculate the percentage of people fully vaccinated per hundred
people_fully_vaccinated_percent <- mean(state_vacc$people_fully_vaccinated_per_hundred, na.rm = TRUE)
# Calculate the percentage of doses used
doses_used_percent <- mean(state_vacc$share_doses_used, na.rm = TRUE)
# Generate the summary paragraph
summary_paragraph <- paste("The total number of vaccinations administered across all states is:", comma(total_vaccinations),
"\nThe total number of vaccine doses distributed to the states is:", comma(total_distributed),
"\nThe percentage of people who have received at least one vaccine dose is:", percent(people_vaccinated_percent/100),
"\nThe percentage of people who are fully vaccinated per hundred individuals is:", percent(people_fully_vaccinated_percent/100),
"\nThe percentage of doses used is:", percent(doses_used_percent/100))
# Print the summary paragraph
cat(summary_paragraph)
# Read the dataset
data <- read.csv("us_state_vaccinations.csv")
library(readr)
# Read the dataset
data <- read.csv("us_state_vaccinations.csv")
# Calculate summary statistics
total_vaccinations_mean <- mean(data$total_vaccinations)
people_fully_vaccinated_mean <- mean(data$people_fully_vaccinated_per_hundred)
total_vaccinations_per_hundred_max <- max(data$total_vaccinations_per_hundred)
daily_vaccinations_max <- max(data$daily_vaccinations)
share_doses_used_mean <- mean(data$share_doses_used)
# Generate summary information
summary_info <- paste("The average total vaccinations administered across all states is", round(total_vaccinations_mean), "doses. On average,", round(people_fully_vaccinated_mean, 2), "percent of the population is fully vaccinated per hundred people. The highest total vaccinations per hundred people is", round(total_vaccinations_per_hundred_max, 2), "in any state. The maximum number of daily vaccinations administered in a single day is", daily_vaccinations_max, "doses. On average,", round(share_doses_used_mean, 2), "percent of the distributed vaccine doses have been used.")
# Print the summary paragraph
cat(summary_info)
library(readr)
# Read the dataset
data <- read.csv("us_state_vaccinations.csv")
# Calculate summary statistics
total_vaccinations_mean <- mean(data$total_vaccinations)
people_fully_vaccinated_mean <- mean(data$people_fully_vaccinated_per_hundred)
total_vaccinations_per_hundred_max <- max(data$total_vaccinations_per_hundred)
daily_vaccinations_max <- max(data$daily_vaccinations)
share_doses_used_mean <- mean(data$share_doses_used)
# Generate summary information
summary_info <- paste("The average total vaccinations administered across all states is", round(total_vaccinations_mean), "doses. On average,", round(people_fully_vaccinated_mean, 2), "percent of the population is fully vaccinated per hundred people. The highest total vaccinations per hundred people is", round(total_vaccinations_per_hundred_max, 2), "in any state. The maximum number of daily vaccinations administered in a single day is", daily_vaccinations_max, "doses. On average,", round(share_doses_used_mean, 2), "percent of the distributed vaccine doses have been used.")
# Print the summary paragraph
cat(summary_info)
# Read the dataset
data <- read.delim("us_state_vaccinations.csv")
library(readr)
# Read the dataset
data <- read.delim("us_state_vaccinations.csv")
# Calculate summary statistics
total_vaccinations_mean <- mean(data$total_vaccinations)
people_fully_vaccinated_mean <- mean(data$people_fully_vaccinated_per_hundred)
total_vaccinations_per_hundred_max <- max(data$total_vaccinations_per_hundred)
daily_vaccinations_max <- max(data$daily_vaccinations)
share_doses_used_mean <- mean(data$share_doses_used)
# Generate summary information
summary_info <- paste("The average total vaccinations administered across all states is", round(total_vaccinations_mean), "doses. On average,", round(people_fully_vaccinated_mean, 2), "percent of the population is fully vaccinated per hundred people. The highest total vaccinations per hundred people is", round(total_vaccinations_per_hundred_max, 2), "in any state. The maximum number of daily vaccinations administered in a single day is", daily_vaccinations_max, "doses. On average,", round(share_doses_used_mean, 2), "percent of the distributed vaccine doses have been used.")
# Print the summary paragraph
cat(summary_info)
library(readr)
# Read the dataset
data <- read.csv("us_state_vaccinations.csv", stringsAsFactors = FALSE)
# Calculate summary statistics
total_vaccinations_mean <- mean(data$total_vaccinations)
people_fully_vaccinated_mean <- mean(data$people_fully_vaccinated_per_hundred)
total_vaccinations_per_hundred_max <- max(data$total_vaccinations_per_hundred)
daily_vaccinations_max <- max(data$daily_vaccinations)
share_doses_used_mean <- mean(data$share_doses_used)
# Generate summary information
summary_info <- paste("The average total vaccinations administered across all states is", round(total_vaccinations_mean), "doses. On average,", round(people_fully_vaccinated_mean, 2), "percent of the population is fully vaccinated per hundred people. The highest total vaccinations per hundred people is", round(total_vaccinations_per_hundred_max, 2), "in any state. The maximum number of daily vaccinations administered in a single day is", daily_vaccinations_max, "doses. On average,", round(share_doses_used_mean, 2), "percent of the distributed vaccine doses have been used.")
# Print the summary paragraph
cat(summary_info)
library(readr)
# Read the dataset
data <- read.csv("us_state_vaccinations.csv", stringsAsFactors = FALSE)
# Calculate summary statistics
total_vaccinations_mean <- mean(data$total_vaccinations)
people_fully_vaccinated_mean <- mean(data$people_fully_vaccinated_per_hundred)
total_vaccinations_per_hundred_max <- max(data$total_vaccinations_per_hundred)
daily_vaccinations_max <- max(data$daily_vaccinations)
share_doses_used_mean <- mean(data$share_doses_used)
# Generate summary information
summary_info <- paste("The average total vaccinations administered across all states is", round(total_vaccinations_mean), "doses. On average,", round(people_fully_vaccinated_mean, 2), "percent of the population is fully vaccinated per hundred people. The highest total vaccinations per hundred people is", round(total_vaccinations_per_hundred_max, 2), "in any state. The maximum number of daily vaccinations administered in a single day is", daily_vaccinations_max, "doses. On average,", round(share_doses_used_mean, 2), "percent of the distributed vaccine doses have been used.")
# Print the summary paragraph
cat(summary_info)
# Read the dataset
data <- read.csv("us_state_vaccinations.csv", stringsAsFactors = FALSE)
# Calculate summary statistics
total_vaccinations_mean <- mean(data$total_vaccinations, na.rm = TRUE)
people_fully_vaccinated_mean <- mean(data$people_fully_vaccinated_per_hundred, na.rm = TRUE)
total_vaccinations_per_hundred_max <- max(data$total_vaccinations_per_hundred, na.rm = TRUE)
daily_vaccinations_max <- max(data$daily_vaccinations, na.rm = TRUE)
share_doses_used_mean <- mean(data$share_doses_used, na.rm = TRUE)
# Generate summary information
summary_info <- paste("The average total vaccinations administered across all states is", round(total_vaccinations_mean), "doses. On average,", round(people_fully_vaccinated_mean, 2), "percent of the population is fully vaccinated per hundred people. The highest total vaccinations per hundred people is", round(total_vaccinations_per_hundred_max, 2), "in any state. The maximum number of daily vaccinations administered in a single day is", daily_vaccinations_max, "doses. On average,", round(share_doses_used_mean, 2), "percent of the distributed vaccine doses have been used.")
# Print the summary paragraph
cat(summary_info)
library(ggplot2)
library(dplyr)
library(scales)
library(tidyverse)
state_vacc <- read.csv("us_state_vaccinations.csv", stringsAsFactors = FALSE)
# Calculate summary statistics
total_vaccinations_mean <- mean(state_vacc$total_vaccinations, na.rm = TRUE)
people_fully_vaccinated_mean <- mean(state_vacc$people_fully_vaccinated_per_hundred, na.rm = TRUE)
total_vaccinations_per_hundred_max <- max(state_vacc$total_vaccinations_per_hundred, na.rm = TRUE)
daily_vaccinations_max <- max(state_vacc$daily_vaccinations, na.rm = TRUE)
share_doses_used_mean <- mean(state_vacc$share_doses_used, na.rm = TRUE)
# Generate summary information
summary_info <- paste("The average total vaccinations administered across all states is", round(total_vaccinations_mean), "doses. On average,", round(people_fully_vaccinated_mean, 2), "percent of the population is fully vaccinated per hundred people. The highest total vaccinations per hundred people is", round(total_vaccinations_per_hundred_max, 2), "in any state. The maximum number of daily vaccinations administered in a single day is", daily_vaccinations_max, "doses. On average,", round(share_doses_used_mean, 2), "percent of the distributed vaccine doses have been used.")
# Print the summary paragraph
cat(summary_info)
library(ggplot2)
library(dplyr)
library(scales)
library(tidyverse)
state_vacc <- read.csv("us_state_vaccinations.csv", stringsAsFactors = FALSE)
# Calculate summary statistics
total_vaccinations_mean <- mean(state_vacc$total_vaccinations, na.rm = TRUE)
people_fully_vaccinated_mean <- mean(state_vacc$people_fully_vaccinated_per_hundred, na.rm = TRUE)
total_vaccinations_per_hundred_max <- max(state_vacc$total_vaccinations_per_hundred, na.rm = TRUE)
daily_vaccinations_max <- max(state_vacc$daily_vaccinations, na.rm = TRUE)
share_doses_used_mean <- mean(data$share_doses_used, na.rm = TRUE) * 100
# Generate summary information
summary_info <- paste("The average total vaccinations administered across all states is", round(total_vaccinations_mean), "doses. On average,", round(people_fully_vaccinated_mean, 2), "percent of the population is fully vaccinated per hundred people. The highest total vaccinations per hundred people is", round(total_vaccinations_per_hundred_max, 2), "in any state. The maximum number of daily vaccinations administered in a single day is", daily_vaccinations_max, "doses. On average,", round(share_doses_used_mean, 2), "percent of the distributed vaccine doses have been used.")
# Print the summary paragraph
cat(summary_info)
library(ggplot2)
library(dplyr)
library(scales)
library(tidyverse)
# Read the dataset
state_vacc <- read_csv("https://data.world/ourworldindata/covid-19-vaccinations/file/us_state_vaccinations.csv")
library(ggplot2)
library(dplyr)
library(scales)
library(tidyverse)
# Read the dataset
state_vacc <- read_csv("us_state_vaccinations.csv")
# Calculate summary statistics
total_vaccinations_mean <- mean(state_vacc$total_vaccinations, na.rm = TRUE)
people_fully_vaccinated_mean <- mean(state_vacc$people_fully_vaccinated_per_hundred, na.rm = TRUE)
total_vaccinations_per_hundred_max <- max(state_vacc$total_vaccinations_per_hundred, na.rm = TRUE)
daily_vaccinations_max <- max(state_vacc$daily_vaccinations, na.rm = TRUE)
share_doses_used_mean <- mean(state_vacc$share_doses_used, na.rm = TRUE) * 100
# Generate summary information
summary_info <- paste("The average total vaccinations administered across all states is", round(total_vaccinations_mean), "doses. On average,", round(people_fully_vaccinated_mean, 2), "percent of the population is fully vaccinated per hundred people. The highest total vaccinations per hundred people is", round(total_vaccinations_per_hundred_max, 2), "in any state. The maximum number of daily vaccinations administered in a single day is", daily_vaccinations_max, "doses. On average,", round(share_doses_used_mean, 2), "percent of the distributed vaccine doses have been used.")
# Print the summary paragraph
cat(summary_info)
library(ggplot2)
library(dplyr)
library(scales)
library(tidyverse)
# Read the dataset
state_vacc <- read_csv("us_state_vaccinations.csv")
# Calculate summary statistics
mean_total_vaccinations <- mean(state_vacc$total_vaccinations, na.rm = TRUE)
mean_people_fully_vaccinated <- mean(state_vacc$people_fully_vaccinated_per_hundred, na.rm = TRUE)
max_total_vaccinations_per_hundred <- max(state_vacc$total_vaccinations_per_hundred, na.rm = TRUE)
max_daily_vaccinations <- max(state_vacc$daily_vaccinations, na.rm = TRUE)
mean_share_doses_used <- mean(state_vacc$share_doses_used, na.rm = TRUE) * 100
# Generate summary information
summary_information <- paste("The average total vaccinations administered across all states is", round(mean_total_vaccinations), "doses. On average,", round(mean_people_fully_vaccinated, 2), "percent of the population is fully vaccinated per hundred people. The highest total vaccinations per hundred people is", round(max_total_vaccinations_per_hundred, 2), "in any state. The maximum number of daily vaccinations administered in a single day is", max_daily_vaccinations, "doses. On average,", round(mean_share_doses_used, 2), "percent of the distributed vaccine doses have been used.")
# Print the summary paragraph
cat(summary_information)
library(ggplot2)
library(dplyr)
library(scales)
library(tidyverse)
# Read the dataset
state_vacc <- read_csv("us_state_vaccinations.csv")
# Calculate summary statistics
mean_total_vaccinations <- mean(state_vacc$total_vaccinations, na.rm = TRUE)
mean_people_fully_vaccinated <- mean(state_vacc$people_fully_vaccinated_per_hundred, na.rm = TRUE)
max_total_vaccinations_per_hundred <- max(state_vacc$total_vaccinations_per_hundred, na.rm = TRUE)
max_daily_vaccinations <- max(state_vacc$daily_vaccinations, na.rm = TRUE)
mean_share_doses_used <- mean(state_vacc$share_doses_used, na.rm = TRUE) * 100
# Generate summary information
summary_information <- paste("The average total vaccinations administered across all states is", round(mean_total_vaccinations), "doses. On average,", round(mean_people_fully_vaccinated, 2), "percent of the population is fully vaccinated per hundred people. The highest total vaccinations per hundred people is", round(max_total_vaccinations_per_hundred, 2), "in any state. The maximum number of daily vaccinations administered in a single day is", max_daily_vaccinations, "doses. On average,", round(mean_share_doses_used, 2), "percent of the distributed vaccine doses have been used.")
# Print the summary paragraph
cat(summary_information)
---
title: "Exploratory Analysis"
---
title: "Exploratory Analysis"
---
title: "Exploratory Analysis"
---
title: "Exploratory Analysis"
---
title: "Exploratory Analysis"
```{r, echo = FALSE, message = FALSE, warning = FALSE, code = source("Summaryinformationscript.R")}
```{r, echo = FALSE, message = FALSE, warning = FALSE, code = source("Summaryinformationscript.R")}
Write a summary paragraph of findings that includes the 5 values calculated from your summary information R script
```{r, echo = FALSE, message = FALSE, warning = FALSE, code = readLines("Summaryinformationscript.R")}
```{r, echo = FALSE, message = TRUE, warning = FALSE, code = readLines("Summaryinformationscript.R")}
pwd()
Write a summary paragraph of findings that includes the 5 values calculated from your summary information R script
getwd()
# Print the summary paragraph
cat(summary_information)
```{r, include=FALSE}
```{r, include=FALSE}
```{r, include=FALSE}
```{r, include=FALSE}
```{r, include=FALSE}
```{r, include=FALSE}
source("Summaryinformationscript.R")
---
title: "Exploratory Analysis"
summary <- summary_information
print(summary)
source("Summaryinformationscript.R")
summary <- summary_information
print(summary)
source("Summaryinformationscript.R")
summary <- summary_information
cat(summary)
{r, include=FALSE, show_col_types = FALSE}
cat(summary)
source("Summaryinformationscript.R")
summary <- summary_information
cat(summary)
{r, include=FALSE, show_col_types = FALSE`}
source("Summaryinformationscript.R")
summary <- summary_information
cat(summary)
source("Summaryinformationscript.R")
plot("Summaryinformationscript.R")
cat("Summaryinformationscript.R")
cat(summary_information)
cat(summary_information)
cat(summary_information)
cat(summary_information)
cat(summary_information)
cat(summary_information)
cat(summary_information)
cat(summary_information)
### Table
cat(summary_information)
cat(summary_information)
cat(summary_information)
cat(summary_information)
cat(summary_information)
options(warning = FALSE)
cat(summary_information)
cat(summary_information)
cat(summary_information)
### Implications
If we answered the research questions, there are several possible
cat(summary_information)
cat(summary_information)
cat(summary_information)
cat(summary_information)
### Table
```{r, echo = FALSE, message = FALSE, warning = FALSE, results = "asis", code = readLines("table.R")}
knitr::kable(aggregate_data, format = "html")
knitr::kable(aggregate_data, format = "html")
This table offers an comprehensive review of relevant aggregated data of the U.S. as a whole regarding the COVID-19 vaccination status and statistics for its latest day of record. Information included in the table are average total doses administered which indicates the overall volume of vaccinations, average number of people fully vaccinated which provides an insight of the progress of vaccination coverage for full immunization, and average shared doses used which examinates the efficiency of vaccine distribution and utilization. This table provides a snapshot of the average statistics, grouping by all states of the United States on the latest available date, to monitor the progress of vaccination efforts and evaluate the effectiveness of vaccination campaigns.
### Chart 1
```{r, echo = FALSE, message = FALSE, warning = FALSE, code = readLines("Nick's Chart.R")}
<<<<<<< HEAD
cat(summary_information)
=======
state_vacc$date <- as.Date(state_vacc$date)
state_vacc$location <- tolower(state_vacc$location)
latest_state_vacc <- state_vacc %>%
group_by(location) %>%
filter(date == max(date))
state_shape <- map_data("state")
View(state_shape)
combined_vacc_state <- left_join(state_shape, latest_state_vacc, by = c("region" = "location"))
ggplot(combined_vacc_state) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = people_fully_vaccinated_per_hundred/100)) +
scale_fill_continuous(low = 'red',
high = 'green',
labels = label_number_si()) +
labs(title = "Proportion of People Fully Vaccinated",
fill = "Proportion")
install.packages("knitr")
install.packages("knitr")
install.packages("kableExtra")
library(knitr)
library(kableExtra)
#kable_html <- kable(aggregate_data, format = "html")
#kable_html
View(aggregate_data)
#kable_html <- kable(aggregate_data, format = "html")
#kable_html
knitr::kable(aggregate_data, format = "html")
install.packages("xfun")
install.packages("xfun")
library(xfun)
library("xfun")
>>>>>>> f6500d44d94bf8eefde97fbe9ceece2399c8b69d
